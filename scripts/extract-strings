#!/bin/python
import argparse
import os
import tokenize

parser = argparse.ArgumentParser(description='extract strings from all .rpy files')
parser.add_argument('-r', '--renpy', action='store_true', help='only print strings from Ren\'Py statements')
parser.add_argument('-e', '--no-expressions', action='store_true', help='only print strings that have no expressions')
args = parser.parse_args()

for file in (file for file in next(os.walk('mod'))[2] if file.endswith('.rpy')):
    print('File {0}:'.format(file))

    with open(os.path.join('mod', file), 'rb') as f:
        python = False
        indent = 0
        py_indent = None

        prev = None
        exp = None

        for token in tokenize.tokenize(f.readline):
            if token.type == tokenize.NAME:
                if token.string in ('m', 'extend'):
                    prev = 'm'
                elif token.string == 'init':
                    prev = 'i'
                elif prev == 'en':
                    prev = 'ec'
                    exp += token.string
                elif token.string == 'python':
                    prev = 'ip'
            elif token.type == tokenize.OP and token.string == ':' and prev == 'ip':
                prev = 'ic'
            elif token.type == tokenize.ERRORTOKEN and token.string == '$':
                python = True
            elif token.type == tokenize.NUMBER:
                if prev == 'm':
                    prev = 'en'
                    exp = token.string
            elif token.type == tokenize.STRING:
                if (not args.no_expressions or prev != 'ec') and (not args.renpy or not python):
                    print('\tLine {0}: {1}'.format(token[2][0], ((exp + ' ') if exp else '') + token[1]))

                prev = None
                exp = None
            elif token.type == tokenize.NEWLINE:
                if prev == 'ic':
                    python = True
                    py_indent = indent
                else:
                    prev = None
                    exp = None
            elif token.type == tokenize.INDENT:
                indent += 1
            elif token.type == tokenize.DEDENT:
                indent -= 1
                if python and py_indent == indent:
                    python = False
                    py_indent = None

    print()
